language: node_js

# 2*2 matrix for tests
os:
  - linux
  - windows
node_js:
  - 10
  - 12

jobs:
  include:
    # run tests in Node.js stable and publish code coverage
    - name: 'Coverage'
      os: linux
      node_js: stable
      script:
        - npm run test-unit
        - npm run codecov -- -c -Z -f .coverage/coverage-final.json -F unit

    # create a new release if $CREATE_RELEASE is set
    - stage: Create Release
      if: env(CREATE_RELEASE) = true AND type = api AND tag IS blank
      os: linux
      node_js: 12
      git:
        depth: false # disable --depth
      script:
        # fail-fast using set -e
        - set -e
        # decrypt and ssh-add the deploy-key
        - openssl aes-256-cbc -K $encrypted_05f822b6caa8_key -iv $encrypted_05f822b6caa8_iv
          -in .github/travis-deploy-key.enc -out /tmp/travis-deploy-key -d
        - chmod 600 /tmp/travis-deploy-key
        - eval "$(ssh-agent -s)"
        - ssh-add /tmp/travis-deploy-key
        - rm /tmp/travis-deploy-key
        # convert remote URL from HTTPS to SSH
        - git remote set-url origin $(git config --get remote.origin.url | sed -E 's#(http.*://)([^/]+)/(.+)$#git@\2:\3#g')
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        # create release
        - npm run release $PUSH_TO_ORIGIN $PRERELEASE_SUFFIX
        - set +e

    # publish npm package on tagged builds
    - stage: Publish Package
      if: tag IS present
      os: linux
      node_js: 12
      git:
        depth: false # disable --depth
      script:
        # fail-fast using set -e
        - set -e
        # get prerelease suffix from version tag
        - TAG=$(echo $TRAVIS_TAG | sed 's/^.*-\([a-z]*\).*$/\1/')
        # set to `latest` in case of no suffix
        - TAG=$([ "${TAG}" = "$TRAVIS_TAG" ] && echo "latest" || echo $TAG)
        # make sure `latest` tag is create from main branch
        - '[ "$TAG" = "latest" ] && [ $(git rev-parse HEAD) != $(git rev-parse origin/main) ] && return 1 || return 0'
        - set +e
      deploy:
        edge: true # opt in to dpl v2
        provider: npm
        tag: $TAG
        on:
          tags: true
          all_branches: true

    # update gh-pages docs on main
    - stage: Publish Docs
      if: branch = main
      script: npm run build-docs
      before_deploy: openssl aes-256-cbc -K $encrypted_05f822b6caa8_key -iv $encrypted_05f822b6caa8_iv
        -in .github/travis-deploy-key.enc -out /tmp/travis-deploy-key -d
      deploy:
        edge: true # opt in to dpl v2
        provider: pages:git
        local_dir: out/docs
        keep_history: false
        deploy_key: /tmp/travis-deploy-key
        commit_message: Deploy to %{target_branch}
        on:
          branch: main

before_install:
  - '[[ "$CREATE_RELEASE" == "true" || "$TRAVIS_BRANCH" == "main" ]] && true || unset encrypted_05f822b6caa8_key'
  - '[[ "$CREATE_RELEASE" == "true" || "$TRAVIS_BRANCH" == "main" ]] && true || unset encrypted_05f822b6caa8_iv'
  - '[[ -z "$TRAVIS_TAG" ]] && unset NPM_API_TOKEN || true'

notifications:
  slack:
    secure: PuYBCkRXgUKxoFMyTZdYcxplpgW+T/hxq54gsFOcAxN079i7PTD/GmGIgKM1RviCocvroUst5bW3ULk3haYUb8gQSCyAeHzRl00DaoOXshTRjFzJyU6m5wbT/R45dh6ZO2BT6uwlVU95KznieCC+yjlbppPOis8bwxra08ODnsA1L7OeI7fVlKjyh+lPA4qnmuYpNtMfTO5mmHroHBS5nWoB1WctWuZQGSfDYLUr/XrhKkJOBbv7FI7setTroIRF4Rs9nIFEF3mzTuUK5VV6lQAZRzNHKmgD9DmGVeaB5Y4fWEznocV1d6cInsjMr4EyMYziyOFnnPZAk8GZapMDwD0/5E9L5+Q8uXhFhVHYurpZnP+wylqZmnfb4UaFcP96BBaavhfF/ai+LWlLbHiL5b1HX4dlauNfHdq1W1YCILI2Atfr+36rqu3102S6HHkOssoTw09ftLfQHuF6CNYnVE5cS40pupwFZj3o0h9yQnCFDPxlq2ls+hon+PKL9wCHL5MlG+jQZDDL8eZC8F9CoZUyVIxNhoh0fnZ+t4bIlGW5eB8f8oMCxcnjocxZpichfAsmuaPh/e2KfdoF/B7ce6+Tb3/YXqo5QVTsJ1Vzi4I7c3jx1Q0DAyZODsBKyE0y7NfmeVNap0WIgajiJBoKji8Fjw+tDfa3hSb4yyPSG6w=
  webhooks:
    urls:
      secure: tCxMtu8e+dqVnqGeVfsU4TCi+6ZbC75kAsiumWNdMoBd5bcleTCeh4ZpLnK+zNgGpI5FJanwQvK/kvlM5JiwgA+mA+srqZf6iO12Aw/TKpXWvL8kSjvAFxzyVL+03UTVHzCdbkqZFtH29gKsRTZ5d574zKNDmpwRL5fyRNxWekQRDUf1zH7kSGCFEqklWeYf8/lqNT+PzCBSHDc7+/KicY008Z4A8tqnp3XM8S7CvJfXQXDaDd0q+LVqdymlG90JATxBLJKZ7PH81KGwcsFQeALnUhlIWqVFvvxTJlBAkRebPlCNq5qKR3An7EB55vAMaxXI9zuEQnjo3xrSl5NaCRpxHQ2TYdLFld7NFVhpgw/cvaWn5gynPYYThVZ0QFC7VZ9iCVaZfM3mxT4nt95RCOskPE549sxEJuu0TlEPlx2NASGfKSEKmxY1D4yglG6dr9p5yakzv1GLhyexXAGOfudGZGc0MiK/A7mewGl1vmFU2/yp92uuXqQpZ4wgGIDkjlfVQuwry/2EeQp5A4HZBJmNiPwGEhN0rQBtsgD8Hpxtsn3ED914JP3j/+7X66WG6n+bwO1+ihv9+GPHEwyO9/jPelpbUoSlMyzpNCHfN8EfbFfD8lDTtU9WXTyfIvuPGg/jEC82EfUUf2WYMFrIowAfnc7yTWb6MXHvC90NGPQ=

